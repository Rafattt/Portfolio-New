import { useState, useEffect, useMemo } from 'react';
import Card from '../components/Card';

function MyWork() {
  const [selectedProject, setSelectedProject] = useState<number | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [showDetailView, setShowDetailView] = useState(false);
  const [selectedFilters, setSelectedFilters] = useState<string[]>(['all']); // Default to 'all'
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && showDetailView) {
        handleCloseCard();
      }
    };

    const handleOutsideClick = (e: MouseEvent) => {
      if (showDetailView) {
        const detailView = document.querySelector('.detail-view');
        if (detailView && !detailView.contains(e.target as Node)) {
          handleCloseCard();
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('mousedown', handleOutsideClick);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [showDetailView]);

  const handleOpenCard = (index: number) => {
    // First set selectedProject and hide filters
    setSelectedProject(index);
    document.querySelector('.filters-toggle-container')?.classList.add('hidden');
    
    if (window.setActiveCardColor) {
      window.setActiveCardColor(projects[index].classCard);
    }
    
    // Force immediate scroll to top with smooth behavior
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
    
    // Then show the detail view
    setTimeout(() => {
      setShowDetailView(true);
    }, 300); // Longer delay to ensure scroll completes before showing detail view
  };

  const handleCloseCard = () => {
    // First hide the detail view
    setShowDetailView(false);
      // After detail view transitions out, show filters
    setTimeout(() => {
      document.querySelector('.filters-toggle-container')?.classList.remove('hidden');
      
      // Then reset the selected project
      setTimeout(() => {
        setSelectedProject(null);

        const hoveredCard = document.querySelector('.card:hover');

        if (!hoveredCard && window.setActiveCardColor) {
          window.setActiveCardColor(null);
        }      }, 200);
    }, 300);
  };

  const projects = [
    // Projects array remains the same
  ];

  // Get unique platforms from projects (excluding empty ones)
  const availablePlatforms = useMemo(() => {
    const platforms = projects
      .map(project => project.platform)
      .filter(platform => platform && platform.trim() !== '');

    // Get unique values
    return [...new Set(platforms)].sort();
  }, [projects]);

  // Filter projects based on selected platforms
  const filteredProjects = useMemo(() => {
    if (selectedFilters.includes('all')) {
      return projects; // Show all projects when 'all' is selected
    }

    return projects.filter(project =>
      selectedFilters.includes(project.platform)
    );
  }, [projects, selectedFilters]);

  // Handle filter selection
  const handleFilterChange = (platform: string) => {
    setSelectedFilters(prev => {
      // If selecting 'all', clear other filters
      if (platform === 'all') {
        return ['all'];
      }

      // If selecting a specific platform, remove 'all' from selection
      let newFilters = prev.filter(p => p !== 'all');

      if (prev.includes(platform)) {
        // Remove filter if already selected
        newFilters = newFilters.filter(p => p !== platform);
      } else {
        // Add filter
        newFilters = [...newFilters, platform];
      }

      // If no filters left, select 'all' again
      if (newFilters.length === 0) {
        return ['all'];
      }

      return newFilters;
    });
  };

  // Reset all filters
  const resetFilters = () => {
    setSelectedFilters(['all']);
  };

  // Toggle filter visibility (for mobile)
  const toggleFilters = () => {
    setShowFilters(prev => !prev);
  };

  return (
    <>
      <div id="background-image"></div>
      <div className="background-img">
        <div className="frosted-overlay"></div>

        {/* Filters Panel */}
        
        <div className={`my-work ${isVisible ? 'fade-in' : ''} ${selectedProject !== null ? 'project-open' : ''}`}>
          <div className='filters-toggle-container'>
            <div className={`filters-panel ${showFilters ? 'show' : ''}`}>
              <button className="filter-toggle" onClick={toggleFilters}>
                <span>{showFilters ? 'Hide Filters' : 'Show Filters'}</span>
              </button>
            </div>
            <div className="filters-content">
              <div className='filters-inner'>
                <h3>Filter Projects</h3>
                <div className="filter-options">
                  {/* All Platforms option */}
                  <label className="filter-option">
                    <input
                      type="checkbox"
                      checked={selectedFilters.includes('all')}
                      onChange={() => handleFilterChange('all')}
                    />
                    <span className="filter-name">All Platforms</span>
                    <span className="filter-count">
                      ({projects.length})
                    </span>
                  </label>

                  {/* Individual platform options */}
                  {availablePlatforms.map(platform => (
                    <label key={platform} className="filter-option">
                      <input
                        type="checkbox"
                        checked={selectedFilters.includes(platform)}
                        onChange={() => handleFilterChange(platform)}
                      />
                      <span className="filter-name">{platform}</span>
                      <span className="filter-count">
                        ({projects.filter(p => p.platform === platform).length})
                      </span>
                    </label>
                  ))}
                </div>
              </div>
              
              {!selectedFilters.includes('all') && selectedFilters.length > 0 && (
                <button className="reset-filters" onClick={resetFilters}>
                  Reset Filters
                </button>
              )}
            </div>
          </div>

          {/* Zmodyfikowany kontener detali */}
          {selectedProject !== null && showDetailView && (
            <div className="detail-view-container" id="detail-view-container">
              <div className="detail-view" style={{ '--highlight-color': projects[selectedProject].highlightColor } as React.CSSProperties}>
                <button className="close-button" onClick={handleCloseCard}>Ã—</button>

                <div className="detail-content">
                  <img src={projects[selectedProject].imgSrc} alt={projects[selectedProject].title} className="detail-logo" />
                  <h2>{projects[selectedProject].title}</h2>
                  <h3 className="description">{projects[selectedProject].companyDesc}</h3>
                  <p className="description">{projects[selectedProject].description}</p>

                  {projects[selectedProject].technologies && projects[selectedProject].technologies.length > 0 && (
                    <>
                      <h3>Technologies</h3>
                      <ul className="technologies">
                        {projects[selectedProject].technologies.map((tech, i) => (
                          <li key={i} className="tech-tag">{tech}</li>
                        ))}
                      </ul>
                    </>
                  )}

                  {/* Platform Specific Features (if available) */}
                  {projects[selectedProject].platformSpecific && projects[selectedProject].platformSpecific.length > 0 && (
                    <>
                      <h3>Platform Specific Features</h3>
                      <ul className="technologies">
                        {projects[selectedProject].platformSpecific.map((feature, i) => (
                          <li key={i} className="tech-tag">{feature}</li>
                        ))}
                      </ul>
                    </>
                  )}

                  {/* Screenshots */}
                  <div className="project-screenshots">
                    {projects[selectedProject].desktopImage && (
                      <img
                        src={projects[selectedProject].desktopImage}
                        alt="Desktop view"
                        className="desktop-screenshot"
                      />
                    )}
                    {projects[selectedProject].mobileImage && (
                      <img
                        src={projects[selectedProject].mobileImage}
                        alt="Mobile view"
                        className="mobile-screenshot"
                      />
                    )}
                  </div>

                  {/* Visit site link */}
                  {projects[selectedProject].link && (
                    <a
                      href={projects[selectedProject].link}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="visit-site-button"
                    >
                      Visit Website
                    </a>
                  )}
                </div>
              </div>
            </div>
          )}
          
          <div className="my-work-inner">
            <div className="cards-container">
              {filteredProjects.map((project, index) => (
                <Card
                  key={index}
                  {...project}
                  isSelected={false}
                  isHidden={showDetailView}
                  onClick={() => handleOpenCard(projects.indexOf(project))}
                  onClose={() => { }}
                />
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default MyWork;
